// Практическая 10.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <cstdio> // Для использования printf


int main() 
{
    // 1 задача

    //int x = 2, y = 3, z = 4; 
    //int sum, product, result;

    //__asm 
    //{
    //    //(x + y + z)
    //    mov eax, x                
    //    add eax, y                // Сложить x и y, результат в EAX
    //    add eax, z                // Сложить результат с z, результат в EAX (сумма x + y + z)
    //    mov sum, eax              // Сохранить сумму в переменной sum

    //    //(x * y * z)
    //    mov eax, x                
    //    imul eax, y               // Умножить x на y, результат в EAX
    //    imul eax, z               // Умножить результат на z, результат в EAX (произведение x * y * z)
    //    mov product, eax          // Сохранить произведение в переменной product

    //    // Шаг 3: Сравнить сумму и произведение, найти минимальное значение
    //    mov eax, sum              // Загрузить сумму в EAX
    //    mov ebx, product          // Загрузить произведение в EBX
    //    cmp eax, ebx              // Сравнить сумму и произведение
    //    jle sum_is_smaller        // Если сумма <= произведение, перейти к метке sum_is_smaller

    //    // Если произведение меньше суммы
    //    mov result, ebx           // Сохранить произведение в переменной result
    //    jmp done                  // Перейти к метке done

    //    sum_is_smaller :
    //    mov result, eax           // Если сумма меньше или равна произведению, сохранить сумму в result

    //        done :
    //    // Завершение блока ассемблера
    //}
    //printf("\t min= %d\n", result);
    //return 0;


    // 2 задача


    double a = 1.0, b = -3.0, c = 2.0;  // Коэффициенты уравнения
    double x1, x2, discriminant, sqrtDiscriminant;

    __asm {
        // Вычисление дискриминанта: D = b^2 - 4ac
        fld b                // Загрузить b на стек
        fmul st(0), st(0)    // b^2
        fld a                // Загрузить a на стек
        fld c                // Загрузить c на стек
        fmul st(0), st(1)    // c * a
        fld1                 // Загрузить 1 на стек
        fld1                 // Загрузить 1 на стек снова (чтобы использовать 4)
        fld1                 // Загрузить 1 на стек третий раз
        fld1                 // Загрузить 1 на стек четвертый раз
        faddp st(1), st(0)   // 1 + 1 = 2
        faddp st(1), st(0)   // 2 + 1 = 3
        faddp st(1), st(0)   // 3 + 1 = 4 (теперь у нас есть 4)
        fmul st(0), st(1)    // 4 * (c * a) = 4ac
        fsubp st(1), st(0)   // b^2 - 4ac
        fstp discriminant    // Сохранить дискриминант в переменной

        // Вычисление корня дискриминанта: sqrt(D)
        fld discriminant     // Загрузить дискриминант
        fsqrt                // Вычислить квадратный корень
        fstp sqrtDiscriminant // Сохранить корень дискриминанта

        // Вычисление первого корня: x1 = (-b + sqrt(D)) / (2a)
        fld b                // Загрузить b на стек
        fchs                 // Изменить знак на противоположный (-b)
        fld sqrtDiscriminant // Загрузить sqrt(D)
        faddp st(1), st(0)   // (-b + sqrt(D))
        fld a                // Загрузить a на стек
        fld1                 // Загрузить 1 на стек
        faddp st(1), st(0)   // 1 + a = 2a
        fdivp st(1), st(0)   // (-b + sqrt(D)) / (2a)
        fstp x1              // Сохранить первый корень

        // Вычисление второго корня: x2 = (-b - sqrt(D)) / (2a)
        fld b                // Загрузить b на стек
        fchs                 // Изменить знак на противоположный (-b)
        fld sqrtDiscriminant // Загрузить sqrt(D)
        fsubp st(1), st(0)   // (-b - sqrt(D))
        fld a                // Загрузить a на стек
        fld1                 // Загрузить 1 на стек
        faddp st(1), st(0)   // 1 + a = 2a
        fdivp st(1), st(0)   // (-b - sqrt(D)) / (2a)
        fstp x2              // Сохранить второй корень
    }

    // Вывод корней
    if (discriminant >= 0) 
    {
        printf("roots: x1 = %g, x2 = %g\n", x1, x2);
    }
    else 
    {
        printf("no roots\n");
    }

    return 0;
}
// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
